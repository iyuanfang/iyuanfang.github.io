{"./":{"url":"./","title":"前言","keywords":"","body":"简介 用户数字化不是简单的数字化系统就可以完成，系统只是第一步，用户互动并收集数据。更重要的需要通过数据指导运营。 "},"Value.html":{"url":"Value.html","title":"用户数字化的演变","keywords":"","body":"价值 "},"LifeCycleValue.html":{"url":"LifeCycleValue.html","title":"用户生命周期管理的价值","keywords":"","body":"生命周期管理价值 "},"LifeCycleModel.html":{"url":"LifeCycleModel.html","title":"常用用户生命周期模型","keywords":"","body":"模型 "},"AARRR.html":{"url":"AARRR.html","title":"AARRR模型","keywords":"","body":"AARRR模型 AARRR是大家最熟知的用户生命周期模型，也被称为“海盗模型”，最早由戴夫·麦克卢尔（Dave McClure）在2007年提出。 早期定义 它把用户分为5个阶段： Acquisition（获取） Activation（激活） Retention（留存） Revenue（收入） Referral（自传播） 这个模型引领了互联网时代的“增长黑客”理论与实践。非常适合互联网产品（特别是SaaS产品）的运营策略。 为什么是SaaS产品呢？ SaaS产品还是羊毛出在羊身上，要用户买单。但这里有一个获客成本的问题。 如果要靠销售来增长，需要大量招销售去获客，然后转化。这也是通常2B产品的玩法。 但AARRR模型先依靠互联网去获客，然后采用免费策略，让用户先用起来。 所以它第二步就是Activation-激活，通过免费版本让用户快速注册和体验。 然后它要让用户持续免费使用。所以Retention-留存在第三步。 然后等用户认可产品价值后，对产品产生依赖，才开始收费，也就是Revenue，带来收入。这里SaaS产品通常有2类收费策略： 免费1个月或免费一些点数，用户到期了或点数用完了，要付费购买 基础功能一直免费，高级功能收费 最后是Referral-裂变，这是增长黑客最关键的一环，通过裂变带来指数级增长，进一步降低获客成本。 这里通常引导裂变的手段就是利益驱动，比如用户推荐1个新用户，奖励1周/1个月 高级会员。 所以AARRR模型的提出，是针对互联网产品，先免费激活，再留存，再引导付费，然后利益驱动裂变，又获取更多新用户。 适合消费品的AARRR 那么到现在，随着消费品用户运营的开展，原有适合互联网免费策略的AARRR模型不是那么的匹配了。 我们仍然可以用AARRR的简写，但这里顺序和解释会有变化，把Revenue和Retention换个顺序。 Acquisition（获取） Activation（激活） Revenue（收入） Retention（留存） Referral（自传播） 第二个A Activation-激活不再是SaaS里让用户注册免费使用产品，而是通过内容互动让用户活跃起来，对品牌产生认知。 然后第三步就促进购买和转化，带来Revenue-收入。 用户完成首购后，开始使用产品，服务开始。品牌方就要关注用户的Retention留存了。让用户留在这，持续购买，提升LTV。 最后还是Referral-传播。消费品肯定难以形成像互联网产品那样的指数级传播。但做做口碑，培养培养KOC，还是有必要的。 这里有一个挺有意思的洞察。越是小众，越是高端品牌，越需要做裂变。因为小众，网上资料少，所以更依赖口碑。因为高端，圈子更小，决策成本更高，所以也依赖圈层传播。 当然用户生命周期模型还有很多，比如阿里的AIPL模型，我们下期再讲。 总结 早期的AARRR模型适合互联网免费产品策略，并不适合现在消费品。但稍微改变的AARRR模型，可以用于品牌用户运营中。 "},"AIPL.html":{"url":"AIPL.html","title":"AIPL模型","keywords":"","body":"AIPL模型 用户生命周期常用模型之一是AIPL，这也是阿里主推的模型。 AIPL理论 AIPL也很简单，将用户分为4个阶段： A（Awareness，认知）：品牌认知人群。包括被品牌广告触达和品类词搜索的人。 I（Interest，兴趣）：品牌兴趣人群。包括广告点击、浏览品牌/店铺主页、参与品牌互动、浏览产品详情页、品牌词搜索、领取试用、订阅/关注/入会、加购收藏的人。 P（Purchase，购买）：品牌购买人群，指购买过品牌商品的人。 L（Loyalty，忠实）：品牌忠诚人群，包括复购、评论、分享的人。 这样将用户分为4个阶段后，就可以对每个阶段的用户在不同渠道做不同的运营动作，也就是常说的用户精细化运营。 AIPL实操 原理很简单，但要实际操作就没那么简单了。 在传统电商时代，这4个阶段都可以在同一平台内完成，这也是阿里推广这个模型的原因。先站内打广告，然后跟踪站内用户的点击浏览，然后购买，再做店铺会员留住用户。每一阶段的行为平台都能跟踪，能准确给出各个阶段的用户数据，进而形成多个指标（比如I到P的转化率），然后观测各个指标的变化，指导运营。 但是到了现在多平台时代，会变得更复杂。 A 这里分2种情况：一种是客户有明确需求，比如要买个电视机（重决策），会先进行泛搜索，找到几个品牌。这里品牌知名度就很重要。另一种就是客户并没有明确需求，但突然在抖音或小红书上刷到，忽然产生了兴趣甚至立马购买（轻决策）。这里会跨多个平台，难以统计A的数据。 I 用户会在各个平台上浏览，包括专业网站，品牌私域，各平台比价，小红书等等。这里品牌需要在各种平台通过内容种草，让用户了解产品参数和价值。所以也有一种说法是AIPL要变成ASPL，S是Study。由于各个平台的行为数据难以收集，所以品牌希望把用户导到私域，比如公众号，小程序，企微，可以跟踪用户行为，引导用户互动与购买。 P 用户的购买也是多平台的，可能在线下，也可能在线上，线上还分天猫、京东、抖音、小程序商城等。要汇总用户的购买数据，需要线上线下打通。大的电商平台提供了会员通接口，通过会员通同步订单，识别同一用户。 L 用户留存是用户运营最能起效果的地方。将用户引入私域，可以更好的服务会员，建立会员忠诚。然后针对性推出一些活动，引导会员复购。所以会员数和复购率往往是重要指标。 从系统层面就是要从各个平台和微信生态收集用户订单与行为数据，然后结合产品特点，将用户分在AIPL各阶段，然后分阶段对用户进行精细化运营，然后分析各个阶段的迁移情况。通过数据指导运营。 "},"Medal.html":{"url":"Medal.html","title":"勋章体系","keywords":"","body":"勋章体系 会员勋章作为与会员等级平行的激励方式，比主要依靠购买来升级更灵活，更有实时性，也更有趣味性。所以勋章也是很多APP和品牌会采用的玩法。 我研究了下市面上会员的勋章体系，发现比较有代表性的还是成长类APP：微信读书、Keep和知乎。我分别分析下，希望从中找到一些勋章体系设计的共性原则。 微信读书 微信读书设计了很多勋章，第一屏把获得的勋章都展示出来，而且用大的数字计数（我是21），有很多读书达人到了100多。 可以看到微信读书是把勋章分类了，一个大类下包含相关多个勋章（通常是计数类勋章）。比如阅读天数，就是累计，我居然已经累计超过1000天。同时我也获得了100天，200天，365天，500天这多个勋章。 这样设计的好处就是记录用户每一步成长，勋章数量持续增加，更有荣誉感。 然后每个勋章可以点击进去： 这里已获得的勋章会展示我是什么时候获得的，已经有多少用户获得，然后支持分享和佩戴。 未获得的勋章会展示还需要多少天可以获得，这样设置一个目标。 知乎 知乎的勋章体系更复杂一点。 这里知乎多了一个限定勋章，就是用户参与某些活动才能获得的勋章，算是一种参与记录与特定荣誉。 勋章点进去： 这里知乎的计数类勋章设计和微信读书不一样。微信读书是平铺，可以得到多枚勋章。而知乎采用了等级方式，同一个勋章里再分5级，每个级别有相应门槛。一个勋章的不同等级通过在一级图片上增加花絮来区分。 知乎未获得的勋章会展示获得条件，但不会提醒还差多少次，会缺少一点目标感。 Keep Keep也是很丰富的勋章玩法。 Keep做了两级级勋章分类，先分“运动人生”，“个人最佳”等，下面再做月度挑战等分类。 未获得的勋章点进去会告诉你获得条件，对于还未结束的活动，又有一个“点击参与”按钮。 已获得的计数类勋章，Keep有点像知乎。它展示为1个勋章，然后在这个勋章里分级，未达到级别灰掉。 分析 3个APP勋章对比可以看到： 微信读书最简单，只支持一级分类，计数类勋章同时可获得多个。已获得勋章会展示何时获得，未获得勋章会展示还差多少。它还会展示现在有多少用户获得该勋章，带有点比较的意思。 知乎也是一级分类，计数类勋章合并为1个勋章，里面再分等级。另外知乎支持限定勋章，用户参与特定活动可以获得，可以鼓励用户参与活动。 Keep最复杂，支持2级分类，计数类勋章与知乎一样合并为一个，然后也支持特定活动勋章。 作为用户而言，我喜欢微信读书这样简单的设计，计数类勋章就该有多个，都是我成长的记录嘛！这样勋章数量多了，再加上总勋章数，又是一种炫耀。微信读书对人性把握的真牛。 然后特定勋章也有价值，记录曾经参与的活动。 "},"architecture.html":{"url":"architecture.html","title":"用户运营系统架构","keywords":"","body":"架构 "}}